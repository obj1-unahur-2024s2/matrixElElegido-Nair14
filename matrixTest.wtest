import matrix.*

describe "Matrix" {

test "neo es el elegido " {
	assert.that(neo.esElElegido())
}

test "morfeo no es el elegido " {
	assert.notThat(morfeo.esElElegido())
}

test "la vitalidad de neo es 10" {
	assert.equals(10, neo.vitalidad())
}

test "la vitalidad de morfreo es 8" {
	assert.equals(8, morfeo.vitalidad())
}

test "la vitalidad de trinity es 0" {
	assert.equals(0, trinity.vitalidad())
}
	
test "en la nave esta el elegido" {
	assert.that(nave.estaElElegido())
}

test "si se baja neo, en la nave ya no esta el elegido" {
	nave.bajarA(neo)
	assert.notThat(nave.estaElElegido())
}

test "en la nave hay tres pasajeros" {
	assert.equals(3, nave.cuantosPasajerosHay())
}

test "el que tiene mayor vitalidad es neo" {
	assert.equals(neo, nave.pasajeroMasVital())
}

test "el que tiene menos vitalidad es trinity" {
	assert.equals(trinity, nave.pasajeroMenosVital())
}

test "morfeo salta y queda cansado " {
	morfeo.saltar()
	assert.that(morfeo.estaCansado())
}

test "morfeo salta dos veces y no queda cansado " {
	morfeo.saltar()
	morfeo.saltar()
	assert.notThat(morfeo.estaCansado())
}

test "la nave no esta equilibrada" {
	assert.notThat(nave.estaEquilibrada())
}

test "si se baja trinity, la nave esta equilibrada" {
	nave.bajarA(trinity)
	assert.that(nave.estaEquilibrada())
}

test "si se nave choca, se queda sin pasajeros" {
	nave.chocar()
	assert.equals(0, nave.cuantosPasajerosHay())
}

test "si se nave choca, todos los pasajeros saltaron " {
	nave.chocar()
	assert.equals(5, neo.vitalidad())
	assert.equals(7, morfeo.vitalidad())
	assert.equals(0, trinity.vitalidad())
}

test "si se nave acelera, los pasajeros saltaron pero neo no" {
	nave.acelerar()
	assert.equals(10, neo.vitalidad())
	assert.equals(7, morfeo.vitalidad())
	assert.equals(0, trinity.vitalidad())	
}

}
